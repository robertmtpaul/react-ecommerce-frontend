{"version":3,"sources":["constants.js","StateProvider.js","components/ProductIndex.js","components/Header.js","components/CartItem.js","components/CartTotal.js","components/Cart.js","components/Login.js","components/Payment.js","components/ProductDetails.js","App.js","serviceWorker.js","reducer.js","index.js"],"names":["BASE_URL","module","exports","PRODUCTS_URL","LOGIN_URL","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","ProductIndex","useState","products","setProducts","dispatch","cart","useEffect","Axios","get","then","response","console","log","data","catch","err","className","map","product","key","_id","to","src","image","alt","name","brand","price","rating","numReviews","onClick","type","item","quantity","addToCart","Header","props","undefined","currentUser","href","e","onLogout","history","push","length","CartItem","id","qty","Array","fill","_","i","CartTotal","useHistory","grandTotal","forEach","cartItem","toFixed","calculateGrandTotal","Cart","Login","state","email","password","handleChange","event","setState","target","handleSubmit","preventDefault","axios","post","res","onLogin","token","user","error","onSubmit","this","placeholder","onChange","React","Component","Payment","useStripe","useElements","address","ProductDetailsFunctional","category","description","setProduct","match","params","promise","loadStripe","App","cartCount","performLogin","defaults","headers","common","Authorization","localStorage","setItem","JSON","stringify","performLogout","removeItem","getItem","parse","path","render","exact","component","ProductDetails","stripe","Boolean","window","location","hostname","action","newCart","index","findIndex","splice","warn","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1239ccee.chunk.js","sourcesContent":["let BASE_URL;\n\nif(!process.env.NODE_ENV || process.env.NODE_ENV === 'development'){\n  BASE_URL = 'http://localhost:1337' // \n} else {\n  BASE_URL = 'https://node-ecommerce-backend.herokuapp.com' // \n} // if else\nmodule.exports = {\n  PRODUCTS_URL: BASE_URL + '/products',\n  LOGIN_URL: BASE_URL + '/login'\n}","// Setup data layer :  We need this to track the basket\n\nimport React, { createContext, useContext, useReducer } from \"react\"\n\n// CREATE EMPTY DATA LAYER: (i.e. the 'context')\nexport const StateContext = createContext();\n\n// CREATE PROVIDER: \nexport const StateProvider = ({reducer, initialState, children}) => (\n    \n    // StateContext provider takes hook useReducer: use a data layer to store data; reducer is the hook, initialState is the empty data layer\n    <StateContext.Provider value={useReducer(reducer, initialState)}>\n        {children}\n    </StateContext.Provider>\n)\n\n    // This is how we use StateProvider inside a component\n    export const useStateValue = () => useContext(StateContext)","// initialise React and hooks methods i.e. useState, useEffect\nimport React, { useState, useEffect } from \"react\";\nimport Axios from \"axios\";\nimport { useStateValue } from \"../StateProvider\";\nimport { Link } from \"react-router-dom\";\nimport { PRODUCTS_URL } from \"../constants\";\nimport \"../ProductIndex.css\";\n\nfunction ProductIndex() {\n  // put the product and setProduct into useState\n  const [products, setProducts] = useState([]);\n  // getting cart, and the dispatch.\n  const [{ cart }, dispatch] = useStateValue();\n\n  // Create function for retrieving product information from Node.js backend.\n  const fetchProducts = () => {\n    // use axios to retrieve products from backend API and store as variable 'data'\n    Axios.get(PRODUCTS_URL)\n      .then((response) => {\n        console.log(\"Sent request for products data to backend\", response.data);\n        // Store the products retrieved by Axios request into state using setProducts\n        setProducts(response.data);\n      })\n      .catch((err) => console.log(err));\n  }; // fetchProducts\n\n  useEffect(() => {\n    // use hook to run\n    fetchProducts();\n    console.log(\"Products mounted!\");\n  }, []);\n\n  const addToCart = (product) => {\n    // Add item to cart...\n    dispatch({\n      type: \"ADD_TO_CART\",\n      item: {\n        product: product._id,\n        name: product.name,\n        image: product.image,\n        price: product.price,\n        quantity: product.quantity,\n        rating: product.rating,\n      },\n    });\n  };\n\n  return (\n    <div>\n      <ul className=\"products\">\n        {\n          // Map through products in state,\n          products.map((product) => (\n            //set key to something unique like productID to satisfy map function\n            <li key={product._id}>\n              <div className=\"product\">\n                <Link to={`${/products/}${product._id}`}>\n                  <img\n                    className=\"product-image\"\n                    src={product.image}\n                    alt={product.name}\n                  />\n                </Link>\n                <div className=\"product-name\">\n                  <Link to={`${/products/}${product._id}`}>{product.name}</Link>\n                </div>\n                <div className=\"product-brand\">{product.brand}</div>\n                <div className=\"product-price\">${product.price}</div>\n                <div className=\"product-rating\">\n                  {product.rating} Stars({product.numReviews} Reviews)\n                </div>\n                <button onClick={() => addToCart(product)}>Add to cart</button>\n              </div>\n            </li>\n          ))\n        }\n      </ul>\n    </div>\n  );\n}\n\nexport default ProductIndex;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../Header.css\";\nimport ShoppingBasketIcon from \"@material-ui/icons/ShoppingBasket\";\n// allow us to use ContextAPI in component.\nimport { useStateValue } from \"../StateProvider\";\n\nfunction Header(props) {\n  const [{ cart }] = useStateValue();\n  // give current state of the cart, then 'dispatch' shoots item to the data layer i.e. cart.\n  // console.log(cart);\n  return (\n    <nav className=\"header\">\n      <Link to=\"/\">\n        <img\n          className=\"header_logo\"\n          src=\"images/logo.svg\"\n          alt=\"shopping cart logo\"\n        />\n      </Link>\n      <div>\n        <h3>Mercadillo</h3>\n      </div>\n      <div className=\"header_nav\">\n        {\n          // use ternary to show links depending on whether user logged in\n          props.currentUser.name !== undefined ? (\n            <span>\n              <span>Hello, {props.currentUser.name} </span>\n\n              {/* perform logout function on click and redirect to login page */}\n              <a\n                href=\"#\"\n                onClick={(e) => {\n                  props.onLogout(e);\n                  props.history.push(\"/login\");\n                }}\n              >\n                Logout{\" \"}\n              </a>\n            </span>\n          ) : (\n            <Link to=\"/login\">\n              <span>Sign in</span>\n            </Link>\n          )\n        }\n        <Link to=\"/cart\">\n          <div className=\"header_optionCart\"></div>\n          <ShoppingBasketIcon />\n          <span className=\"header_cartCount\">{cart?.length}</span>\n        </Link>\n      </div>\n    </nav>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"../Cart.css\";\nimport \"../CartItem.css\";\nimport { useStateValue } from \"../StateProvider\";\n\nfunction CartItem({ name, id, price, image, qty, rating }) {\n  const [{ cart }, dispatch] = useStateValue();\n  // console.log(name, id, price, image, qty, rating);\n  const removeFromCart = () => {\n    // remove selected item from cart\n    dispatch({\n      type: \"REMOVE_FROM_CART\",\n      id: id,\n    });\n  };\n\n  return (\n    <div className=\"cartItem\">\n      <img src={image} className=\"cartItem_image\" alt={name} />\n      <div className=\"cartItem_details\">\n        <p className=\"cartItem_name\">{name}</p>\n        <p>In stock: {qty}</p>\n        <p className=\"cartItem_price\">\n          <small>$</small>\n          <strong>{price}</strong>\n        </p>\n        <div className=\"cartItem_rating\">\n          <p>Rating: </p>\n          {Array(rating)\n            .fill()\n            .map((_, i) => (\n              <p>⭐️</p>\n            ))}\n        </div>\n\n        <button onClick={removeFromCart}>Remove item</button>\n      </div>\n    </div>\n  );\n}\n\nexport default CartItem;\n","import React from \"react\";\nimport \"../CartTotal.css\";\nimport { useHistory } from \"react-router-dom\";\nimport { useStateValue } from \"../StateProvider\";\n\nfunction CartTotal() {\n  const history = useHistory();\n  const [{ cart }, dispatch] = useStateValue();\n\n  const calculateGrandTotal = () => {\n    // Set a variable to start tracking the amount all the items are costing.\n    let grandTotal = 0;\n    // Loop through the cart's items and add up all their prices.\n    cart.forEach((cartItem) => {\n      grandTotal += cartItem.price;\n    });\n    // Spit out the grand total, and add two decimal places.\n    return grandTotal.toFixed(2);\n  };\n\n  return (\n    <div>\n      Grandtotal: ${calculateGrandTotal()}\n      <div className=\"button-group\">\n        <button\n          className=\"button-primary\"\n          onClick={\n            (e) => history.push(\"/payment\") // pushes the user somewhere, instead of using link.\n          }\n        >\n          Go to checkout\n        </button>\n        <button className=\"button-danger\">Clear cart</button>\n      </div>\n    </div>\n  );\n}\n\nexport default CartTotal;\n","import React from \"react\";\nimport { useStateValue } from \"../StateProvider\";\nimport CartItem from \"./CartItem\";\nimport \"../Cart.css\";\nimport CartTotal from \"./CartTotal\";\n\nfunction Cart() {\n  const [{ cart }] = useStateValue();\n\n  // const clearCart = () => {\n  //     console.log('checking for cart items', this.props.cart);\n  //     localStorage.removeItem(\"cart\")\n  //     this.props.history.push('/')\n  // }\n\n  return (\n    <div className=\"cart\">\n      <div className=\"cartItems\">\n        {cart?.length === 0 ? ( // Use ternary to check if cart is empty, and if so display a message to user.\n          <div>\n            <h2>Your shopping cart is empty</h2>\n            <p>\n              You have no items in your cart. To add, click \"Add to cart\" next\n              to items.\n            </p>\n          </div>\n        ) : (\n          // Otherwise show the user their cart:\n          <div>\n            <h2>Shopping cart: </h2>\n\n            {\n              //use .map to go through the array of items in the cart and display to the user the name, qty of the item in the cart, and an image for the item.\n              cart?.map((product) => {\n                // console.log(product);\n                return (\n                  <CartItem\n                    name={product.name}\n                    id={product.id}\n                    price={product.price}\n                    qty={product.quantity}\n                    image={product.image}\n                    rating={product.rating}\n                  />\n                );\n              })\n            }\n          </div>\n        )}\n      </div>\n      {\" \"}\n      {/* cartItems */}\n      {cart.length > 0 && ( // if there are items in the cart, display this:\n        <div className=\"cartTotal\">\n          <CartTotal />\n        </div>\n      )}\n    </div> // cart\n  ); // return\n}\n\nexport default Cart;\n","import React from \"react\";\nimport \"../Login.css\";\nimport axios from \"axios\";\nimport { LOGIN_URL } from \"../constants\";\nimport \"../Checkout.css\";\n\nclass Login extends React.Component {\n  // login state\n\n  state = {\n    email: \"robbie@ga.co\",\n    password: \"chicken\",\n  };\n\n  // Store the information entered into the fields in the form as soon as there is a change by listening for event / moment something entered in the form\n  handleChange = (event) => {\n    this.setState({\n      // it differentiates between the email/password inputs using the ‘name’ value in the form input element, then assigns it a value to be stored in state\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    // HandleSubmit posts the login details entered in the form to the backend using axios post request.\n    axios\n      .post(LOGIN_URL, {\n        email: this.state.email,\n        password: this.state.password,\n      })\n      .then((res) => {\n        // Sets token and user app props to the token and user object received from backend.\n        this.props.onLogin(res.data.token, res.data.user);\n        // Redirects user to productIndex page.\n        this.props.history.push(\"/\");\n      })\n      .catch((error) => {\n        // tODO: what if user provided incorrect dtes/-=-.> need to show error message: put\n        console.log(\n          \"Authentication error: incorrect username or password. \",\n          error\n        );\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"login\">\n        <div className=\"login_container\">\n          <h1>Please sign in </h1>\n\n          <form onSubmit={this.handleSubmit} className=\"formGroup\">\n            <input\n              type=\"text\"\n              name=\"email\"\n              placeholder=\"Email\"\n              onChange={this.handleChange}\n            />\n\n            <input\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Password\"\n              onChange={this.handleChange}\n            />\n\n            <div>\n              <button className=\"button-primary\">Sign in</button>\n              <p>OR:</p>\n              <button className=\"button-primary\">\n                Use default login credentials\n              </button>\n            </div>\n\n            <div>\n              <br />\n            </div>\n          </form>\n        </div>\n      </div>\n    ); // return\n  } // render\n} // Class login\n\nexport default Login;\n","import React from 'react'\nimport { Link } from 'react-router-dom';\nimport '../Payment.css'\nimport CartItem from './CartItem';\nimport { useStateValue } from '../StateProvider'\nimport { CardElement, useElements, useStripe } from '@stripe/react-stripe-js';\n\nfunction Payment(props) {\n    const [{ cart }, dispatch] = useStateValue();\n\n    const stripe = useStripe();\n    const elements = useElements();\n\n    // const [error, setError] = useState(null);\n    // const [disabled, setDisabled] = useState(true);\n\n    const handleSubmit = event => {\n        // stripe API requests\n    }\n\n    return (\n        <div className=\"payment\">\n            <div className=\"payment_container\">\n                <h1>\n                    Checkout (\n                        <Link to=\"/cart\">{cart?.length} items</Link>\n                    )\n                </h1>\n                {/* Payment - delivery address */}\n                <div className=\"payment_section\">\n                    <div className=\"payment_title\">\n                        <h3>Delivery address</h3>\n                    </div>\n                    <div className=\"payment_address\">\n                        <p>{props.currentUser.name} ({props.currentUser.email})</p>\n                        <p>{props.currentUser.address}</p>\n                        <p>Sydney, Australia</p>\n                    </div>\n                </div>\n\n                {/* Payment - Review your items */}\n                <div className=\"payment_section\">\n                    <div className=\"payment_title\">\n                        <h3>Review items and delivery</h3>\n                    </div>\n                    {cart.map(product => (\n                        <CartItem\n                            name={product.name}\n                            id={product.id}\n                            qty={product.quantity}\n                            price={product.price}\n                            image={product.image}\n                            rating={product.rating}\n                        />\n                    ))}\n                </div>\n\n                {/* Payment - Payment method */}\n                <div className=\"payment_section\">\n                    <div className=\"payment_title\">\n                        <h3>Payment method</h3>\n                    </div>\n                    <div className=\"payment_details\">\n                        <form onSubmit={handleSubmit}>\n                            <CardElement />\n                        </form>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    )\n}\n\nexport default Payment\n","import Axios from \"axios\";\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { PRODUCTS_URL } from \"../constants\";\nimport { useStateValue } from \"../StateProvider\";\nimport \"../ProductDetails.css\";\n\n// let cartQty = 0;\n\nexport default function ProductDetailsFunctional(props) {\n  const [product, setProduct] = useState({\n    name: \"\",\n    category: \"\",\n    image: \"\",\n    price: \"\",\n    brand: \"\",\n    rating: \"\",\n    quantity: \"\",\n    numReviews: \"\",\n    description: \"\",\n  });\n  const [{ cart }, dispatch] = useStateValue();\n  // const [quantity, setQuantity] = useState(1);\n\n  const fetchProduct = () => {\n    // use axios to retrieve product with the matching ID passed in by props and store as variable 'data'\n    Axios.get(`${PRODUCTS_URL}/${props.match.params.id}`)\n      // Set the product retrieved by Axios request into state using setProduct.\n      .then((response) => {\n        console.log(\"matched product\", response.data);\n        setProduct(response.data);\n      })\n      .catch((err) => console.log(err));\n  }; // fetchProduct\n\n  useEffect(() => {\n    fetchProduct();\n    console.log(\"Product component mounted!\");\n    // create function that runs and grabs data from API\n  }, [props.match]);\n\n  // function checkCart() {\n  //   const productId = props.match.params.id;\n  //   props.cart.forEach((cartProduct) => {\n  //     if (cartProduct.productId === productId) {\n  //       cartQty += cartProduct.qty;\n  //     }\n  //   });\n  // }\n\n  const addToCart = () => {\n    // Add item selected to cart...\n    dispatch({\n      type: \"ADD_TO_CART\",\n      item: {\n        product: product._id,\n        name: product.name,\n        image: product.image,\n        price: product.price,\n        quantity: product.quantity,\n        rating: product.rating,\n      },\n    });\n  };\n\n  function cartClick() {\n    addToCart();\n    // checkCart();\n  }\n\n  return (\n    <div className=\"details\">\n      <Link className=\"back\" to=\"/\">\n        Back\n      </Link>\n      <div className=\"details\">\n        <div className=\"details-image\">\n          <img src={product.image} alt={product.name} />\n        </div>\n        <div className=\"details-info\">\n          <ul>\n            <li>\n              <h4>{product.name}</h4>\n            </li>\n            <li>\n              {product.rating} Stars ({product.numReviews} Reviews )\n            </li>\n            <li>\n              <strong>Price: ${product.price} </strong>\n            </li>\n            {/* <li>\n              <p>Description:</p>\n              {product.description}\n            </li> */}\n          </ul>\n        </div>\n      </div>\n      <div className=\"details-action\">\n        {/* {cartQty > 0 && <div>You have this amount in cart....{cartQty}</div>} */}\n        <ul>\n          <li>\n            Price: <strong>${product.price}</strong>\n          </li>\n          <li>Stock levels: {\n            product.quantity > 20 ? (\n              <p>High</p>\n            ) : (\n              <p>Low</p>\n            )\n            }\n\n          </li>\n          {/* <li>\n            <select\n              onChange={(e) => {\n                setQuantity(parseInt(e.target.value));\n              }}\n            >\n              <option>1</option>\n              <option>2</option>\n              <option>3</option>\n              <option>4</option>\n              <option>5</option>\n            </select>\n          </li> */}\n          <li>\n            <button className=\"button\" onClick={cartClick}>\n              Add to cart\n            </button>\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport \"./Footer.css\";\nimport { Route, HashRouter as Router } from \"react-router-dom\";\nimport axios from \"axios\";\n\n// import website components\nimport ProductIndex from \"./components/ProductIndex\";\nimport Header from \"./components/Header\";\nimport Cart from \"./components/Cart\";\nimport Login from \"./components/Login\";\nimport Payment from \"./components/Payment\";\nimport ProductDetails from \"./components/ProductDetails\";\n\nimport { auth } from \"./firebase\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Elements } from \"@stripe/react-stripe-js\";\n\nconst promise = loadStripe(\n  \"pk_test_51HUoMRErAewt7RL6NDXnnMAB1Qzx8LEq7baSaXT5fy11YQmsl8A2c2m4mzzeW5O3R4Nynlsdh5srVKDyNkNQ6vZZ00pyGr4vsZ\"\n);\n\nclass App extends React.Component {\n  state = {\n    user: {},\n    cart: [],\n    cartCount: 0,\n  };\n\n  componentDidMount() {\n    // Check if local storage token and user is set\n    const token = localStorage.getItem(\"token\");\n    const user = localStorage.getItem(\"user\");\n    // And if not null, set token into the axios header\n    // which will cause axios headers to be authenticated\n    // set user object into state.\n    if (token !== null && user !== null) {\n      this.setState({ user: JSON.parse(user) });\n      axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n    }\n    // Load shopping cart from local storage if available\n    // if not null, assume ... (?)\n    const cart = localStorage.getItem(\"cart\");\n    if (cart !== null) {\n      // JSON.parse gets the string back and turns into array of objects/\n      this.setState({ cart: JSON.parse(cart) });\n    }\n  }\n\n  // passes as arguments token and user that backend sent\n  performLogin = (token, user) => {\n    // console.log(\"app.performLogin\", token, user);\n    // setting the axios header with the token sent by the backend\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n    // store the current user into state as an object.\n    this.setState({ user });\n    // save the token into local storage for use by App.js and other components on site.\n    localStorage.setItem(\"token\", token);\n    // local storage can only set strings, can't set complex items, so needs to have the JSON stringified.\n    localStorage.setItem(\"user\", JSON.stringify(user));\n    // console.log(\"user is\", user);\n  };\n\n  performLogout = (event) => {\n    event.preventDefault();\n    delete axios.defaults.headers.common.Authorization;\n\n    // Remove the cart & users props stored in local storage.\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    // set the user state as empty object\n    this.setState({ user: {} });\n  };\n\n  render() {\n    return (\n      <Router>\n        <div>\n          {/*        \n            Pass in ROUTER PROPS into the header component. \n          */}\n          <Route\n            path=\"/\"\n            render={(props) => (\n              <Header\n                {...props}\n                onLogout={this.performLogout}\n                currentUser={this.state.user}\n              />\n            )}\n          />\n          <Route\n            exact\n            path=\"/login\"\n            render={(props) => <Login {...props} onLogin={this.performLogin} />}\n          />\n          <main className=\"main\">\n            <div>\n              <br />\n            </div>\n            <div className=\"content\">\n              <Route exact path=\"/\" component={ProductIndex} />\n              <Route exact path=\"/products/:id\" component={ProductDetails} />\n              <Route path=\"/cart\">\n                <Cart />\n              </Route>\n              <Route exact path=\"/payment\"\n                render={(props) => (\n                  <Elements stripe={promise}>\n                    <Payment\n                    {...props} // Pass in the current user to the payment page using router props\n                    currentUser={this.state.user}\n                    />\n                  </Elements>\n                  )}\n              />\n              \n            </div>\n          </main>\n          <footer className=\"footer\">\n            Final project at General Assembly - by Robert Paul - rob@glo.id.au\n          </footer>\n        </div>\n      </Router>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// We export this as we want to use it outside of this reducer.js file.\nexport const initialState = {\n  cart: [],\n};\n\nexport const calculateGrandTotal = (cart) =>\n  cart?.reduce((amount, item) => item.price + amount, 0);\n\n// Create reducer that manipulates the data layer with actions (the 'action' argument)\nconst reducer = (state, action) => {\n  switch (\n    action.type // CHECK against a number of strings i.e. case\n  ) {\n    case \"ADD_TO_CART\":\n      // HERE: Logic statements for adding item to cart.\n      // It will do a bunch of stuff, then it will break.\n      return {\n        ...state,\n        cart: [...state.cart, action.item], // returning the current state of the cart, plus the new item.\n      }; // here we need to return the state, and this breaks things, so no need for 'break'\n    case \"REMOVE_FROM_CART\":\n      // Logic for Removing item from cart.  It will do a bunch of stuff, then break.\n\n      // 1. CLONE CART\n      let newCart = [...state.cart];\n\n      // 2. CHECK TO SEE IF ITEM EXISTS IN CART stored in state.\n      const index = state.cart.findIndex(\n        (cartItem) => cartItem.id === action.id\n      );\n\n      // 3. IF ITEM EXISTS, cut it out.\n      if (index >= 0) {\n        newCart.splice(index, 1); // splice : go and get the item at index found, and cut it out.\n      } else {\n        console.warn(\n          `Could not remove product (id: ${action.id}) as ID was not found.`\n        );\n      }\n      return {\n        // set state to whatever state previously was\n        ...state,\n        cart: newCart,\n      }; // cart should be the newCart.\n    default:\n      //provide a default action to happen, and in this case just do nothing\n      return state;\n  }\n};\n\nexport default reducer; // this allows us to use the reducer outside this component.\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { StateProvider } from \"./StateProvider\";\nimport reducer, { initialState } from \"./reducer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* Add data layer StateProvider wraps the App in a data layer to manipulate state throughout the app */}\n    {/* Here the initial state and the reducer are imported for use by StateProvider */}\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}