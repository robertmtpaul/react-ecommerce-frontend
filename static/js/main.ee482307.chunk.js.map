{"version":3,"sources":["constants.js","components/ProductIndex.js","components/Header.js","components/CartItem.js","components/Cart.js","components/ProductDetails.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["BASE_URL","module","exports","PRODUCTS_URL","LOGIN_URL","ProductIndex","props","useState","products","setProduct","useEffect","a","axios","get","data","fetchProducts","className","map","product","key","_id","to","src","image","alt","name","brand","price","rating","numReviews","Header","type","undefined","currentUser","href","onClick","e","onLogout","history","push","cartCount","CartItem","itemName","itemQty","itemImage","removeItem","Cart","console","log","qty","grandTotal","this","cart","forEach","cartItem","toFixed","localStorage","c","calculateGrandTotal","clearCart","React","Component","cartQty","ProductDetails","state","category","description","addToCart","onAddToCart","match","params","id","then","setState","catch","err","productId","cartProduct","checkCart","status","onChange","parseInt","target","value","cartClick","Login","email","password","handleChange","event","handleSubmit","preventDefault","post","res","onLogin","token","user","error","onSubmit","App","newCart","setItem","JSON","stringify","performLogin","defaults","headers","common","Authorization","performLogout","getItem","parse","path","render","exact","component","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ee482307.chunk.js","sourcesContent":["let BASE_URL;\n\nif(!process.env.NODE_ENV || process.env.NODE_ENV === 'development'){\n  BASE_URL = 'http://localhost:1337' // \n} else {\n  BASE_URL = 'https://node-ecommerce-backend.herokuapp.com' // \n} // if else\nmodule.exports = {\n  PRODUCTS_URL: BASE_URL + '/products',\n  LOGIN_URL: BASE_URL + '/login'\n}","// initialise React and hooks methods i.e. useState, useEffect\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom'\nimport axios from 'axios';\nimport {PRODUCTS_URL} from '../constants'\n\nfunction ProductIndex (props) {\n    // put the product and setProduct into useState\n    const [ products, setProduct ] = useState ([]);\n    \n    useEffect(() => {\n      const fetchProducts = async () => {\n        const { data } = await axios.get(PRODUCTS_URL)\n        // Set the data retrieved vai axios request into state in setProduct\n        setProduct(data);\n      }\n      fetchProducts(); \n      return () => {\n        // cleanup\n      }\n    }, [])\n\n    return <ul className=\"products\">\n    {\n      // Map through products in state, \n      products.map(product =>\n        //set key to something unique like productID to satisfy map function\n        <li key = { product._id }>\n          <div className=\"product\">\n            <Link to={`${/products/}${product._id}`}>\n              <img className=\"product-image\" src={product.image} alt={product.name} />\n            </Link>\n            <div className=\"product-name\">\n              <Link to={`${/products/}${product._id}`}>{product.name}</Link>\n            </div>\n            <div className=\"product-brand\">{product.brand}</div>\n            <div className=\"product-price\">${product.price}</div>\n            <div className=\"product-rating\">{product.rating} Stars({product.numReviews} Reviews)</div>\n          </div>\n        </li>)\n    }\n  </ul>\n    \n}\n\nexport default ProductIndex;","import React from \"react\";\nimport { Link, HashRouter as Router } from 'react-router-dom';\nimport \"../Header.css\"\nimport SearchIcon from \"@material-ui/icons/Search\"\nimport ShoppingBasketIcon from \"@material-ui/icons/ShoppingBasket\"\n\nfunction Header(props) {\n\n    return (\n\n        <nav className=\"header\">\n            <Link to=\"/\" >\n                <img className=\"header_logo\" src=\"https://leanfrontiers.com/wp-content/uploads/2018/12/logo-placeholder-png.png\" />\n            </Link>\n            <div className=\"header_search\">\n                <input type=\"text\" />\n                <SearchIcon className=\"header_searchIcon\" />\n            </div>\n            <div className=\"header_nav\">\n                \n                {  // use ternary to show links depending on whether user logged in\n                 props.currentUser.name !== undefined  \n                 ? \n                 ( \n                  <span>\n                    <span>Hello {props.currentUser.name } </span>\n\n                    {/* perform logout function on click and redirect to login page */}\n                    <a href=\"#\" onClick={(e) => {props.onLogout(e); props.history.push('/login')} }>Logout </a>\n                  </span>    \n                 ) \n                 : \n                 (\n                    <Link to=\"/login\">\n                        <span>Sign in</span>\n                    </Link>\n                 )\n                }                       \n                <Link to=\"/cart\">\n                    <div className=\"header_optionBasket\"></div>\n                        {/* Shopping basket icon */}\n                        <ShoppingBasketIcon />\n                        {/* Number items in the basket */}\n                        <span className=\"header_basketCount\">{props.cartCount}</span>\n                </Link>\n            </div>\n            {/* TODO: basket icon with number badge */}\n        </nav>\n\n    )\n}\n\nexport default Header;","import React from 'react'\nimport '../Cart.css'\n\nfunction CartItem(props) {\n\n    return (\n        <div>\n            {props.itemName}, x{props.itemQty}\n            <br />\n            <img src={props.itemImage} className=\"checkout-thumbnail\" />\n            <button>{props.removeItem()}Remove items</button>\n        </div>\n    )\n}\n\nexport default CartItem\n","import React from \"react\"\nimport Link from 'react-router-dom'\nimport CartItem from './CartItem'\n\nclass Cart extends React.Component {\n\n    // TODO: cartUpdate function?\n    // TODO : add remove item from cart\n    // TODO: rename checkout to cart;  // /cart separate react route: \n\n    \n    \n    calculateGrandTotal() {\n        // Set a variable to start tracking the amount all the items are costing.\n        let grandTotal = 0\n        // Loop through the cart items and multiply the quantities of each item by their respective price.\n        this.props.cart.forEach(cartItem => {\n            grandTotal += cartItem.product.price * cartItem.qty\n        });\n        // Spit out the grand total, and add two decimal places.\n        return grandTotal.toFixed(2)\n    }\n    \n    clearCart() {\n        console.log('checking for cart items', this.props.cart);\n        localStorage.removeItem(\"cart\")\n        this.props.history.push('/')\n    }\n    \n    removeItem = () => {\n        console.log('checking if deleted', this.props.qty)\n        // this.props.product.item\n    }\n    \n\n    render() {\n        return (\n            <div>\n                <h5>Here's a detailed breakdown of your cart:</h5>\n                <div>\n                    {\n                        //use .map to go through the array of items in the cart and display to the user the name, qty of the item in the cart, and an image for the item.\n                        this.props.cart.map(c =>\n                            <CartItem\n                                itemName={c.product.name}\n                                itemQty={c.qty}\n                                itemImage={c.product.image}\n                                removeItem={this.removeItem}\n                            />\n                        ) \n                    }\n                    \n                    Grandtotal: ${this.calculateGrandTotal()}\n\n                    <button onClick={() => this.clearCart() }>Clear cart</button>\n                </div>\n            </div>\n        )\n    }\n\n\n}\n\nexport default Cart","import React from \"react\";\nimport { Link, HashRouter as Router } from \"react-router-dom\";\nimport \"../ProductDetails.css\";\nimport axios from \"axios\";\nimport {PRODUCTS_URL} from '../constants'\n\nlet cartQty = 0;\n\nclass ProductDetails extends React.Component {\n    state = {\n        data: {\n            name: \"\",\n            category: \"\",\n            image: \"\",\n            price: \"\",\n            brand: \"\",\n            rating: \"\",\n            numReviews: \"\",\n            description: \"\"\n        },\n        qty: 1\n    }; // state\n\n    componentDidMount() {\n        axios\n            .get(`${PRODUCTS_URL}/${this.props.match.params.id}`)\n            .then(data => {\n                console.log(data);\n                this.setState({ data: data.data });\n            })\n            .catch(err => console.log(err));\n    } // componentDidMount\n\n    addToCart = () => {\n        // console.log('button clicked : contents')\n        // On button click, adds the item from the product details page and passes the ID passed from the parent component App.js\n        this.props.onAddToCart(this.state.data, this.state.qty)\n    }\n\n    checkCart() {\n        // console.log('check cart!!');\n        const productId = this.props.match.params.id\n        this.props.cart.forEach(cartProduct => {\n            // check productId's value of each obj against current id in state\n            console.log(\"product being compared:\", cartProduct);\n            if (cartProduct.productId === productId) {\n                cartQty += cartProduct.qty;\n            }\n        });\n    }\n\n    cartClick() {\n        this.addToCart();\n        this.checkCart();\n    }\n\n    render() {\n\n        return (\n            <div className=\"details\">\n                <div className=\"back\">\n                    <Link to=\"/\">Back</Link>\n                </div>\n                <div className=\"details\">\n                    <div className=\"details-image\">\n                        <img src={this.state.data.image} alt={this.state.data.name} />\n                    </div>\n                    <div className=\"details-info\">\n                        <ul>\n                            <li>\n                                <h4>{this.state.data.name}</h4>\n                            </li>\n                            <li>\n                                {this.state.data.rating} Stars ({this.state.data.numReviews}{\" \"}\n                Reviews )\n              </li>\n                            <li>\n                                <strong>Price: ${this.state.data.price} </strong>\n                            </li>\n                            <li>\n                                <p>Description:</p>\n                                {this.state.data.description}\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n                <div className=\"details-action\">\n                    {cartQty > 0 && <div>You have this amount in cart....{cartQty}</div>}\n                    <ul>\n                        <li>\n                            Price: <strong>${this.state.data.price}</strong>\n                        </li>\n                        <li>Status: {this.state.data.status}</li>\n                        <li>\n                            {/* when button clicked, uses event to save quantity into state */}\n              Qty:{\" \"}\n                            <select\n                                onChange={e => this.setState({ qty: parseInt(e.target.value) })}\n                            >\n                                <option>1</option>\n                                <option>2</option>\n                                <option>3</option>\n                                <option>4</option>\n                                <option>5</option>\n                            </select>\n                        </li>\n                        <li>\n                            {/* gives name of the function to run later on time of click */}\n                            <button className=\"button\" onClick={() => this.cartClick()}>\n                                Add to cart\n              </button>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n} // ProductDetails class\n\nexport default ProductDetails;\n","import React, { useState } from 'react'\nimport '../Login.css';\nimport { Link, HashRouter as Router } from 'react-router-dom';\nimport axios from 'axios';\nimport {LOGIN_URL} from '../constants'\n\nclass Login extends React.Component {\n    // login state \n\n    state = {\n        email: '',\n        password: '',\n    };\n\n    // Store the information entered into the fields in the form as soon as there is a change by listening for event / moment something entered in the form\n    handleChange = (event) => {\n        console.log(event.target.value)\n        console.log(event.target.name)\n        this.setState({\n            // it differentiates between the email/password inputs using the ‘name’ value in the form input element, then assigns it a value to be stored in state\n            [event.target.name]:event.target.value\n        })\n    }\n    \n    handleSubmit = (event) => {\n        event.preventDefault();\n        console.log( )\n        // HandleSubmit posts the login details entered in the form to the backend using axios post request.\n        axios.post(  LOGIN_URL, { \n            email: this.state.email,\n            password: this.state.password\n        })\n        .then(res => {\n            console.log('response data', res.data)\n        // Sets token and user app props to the token and user object received from backend.\n            this.props.onLogin(res.data.token, res.data.user)\n        // Redirects user to productIndex page.\n            this.props.history.push('/')\n        })\n        .catch(error => {\n            // tODO: what if user provided incorrect dtes/-=-.> need to show error message: put \n            console.log('Authentication error: incorrect username or password. ', error)\n        })\n        \n    }\n\n    render(){\n        return (\n            <div className=\"login\">\n            <Link to='/'>\n                <img\n                    className=\"login_logo\"\n                    src=\"https://static.dribbble.com/users/261302/screenshots/1361907/logoplaceholder.png\"\n                />\n            </Link>\n            <div className='login_container'>\n                <h1>Sign-in</h1>\n\n                <form onSubmit={this.handleSubmit}>\n                    <h5>E-mail</h5>\n                    <input \n                        type=\"text\" \n                        name=\"email\"\n                        onChange={this.handleChange} \n                    />\n\n                    <h5>Password</h5>\n                    <input \n                        type=\"password\" \n                        name=\"password\"\n                        onChange={this.handleChange} \n                    />\n\n                    <button className=\"login_signInButton\">Sign in</button>\n                </form>\n\n            </div>\n        </div>\n        ); // return\n    } // render\n\n} // Class login\n\n\nexport default Login\n","//  KNOWN BUGS : \n//  1. Cart doesn't clear until refresh/change item - \n//  2. When you hit refresh after clearing cart and click into productDetails, 401 unauthorized - user token is reset.\n//  3. \nimport React from 'react';\nimport './App.css';\nimport './Footer.css';\nimport { Route, Link, HashRouter as Router } from 'react-router-dom';\n\n// import website components\nimport ProductIndex from './components/ProductIndex'\nimport Header from './components/Header'\nimport Cart from './components/Cart'\nimport ProductDetails from './components/ProductDetails'\nimport Login from './components/Login'\nimport axios from 'axios'\n\nclass App extends React.Component {\n  state = {\n    user: {},\n    cart: [],\n    cartCount: 0,\n  }\n  \n  addToCart = (product, qty) => {\n    // console.log('in add to cart: ', product, qty )\n    \n    // Set a variable that keeps an updated version of the cart i.e. \n    ///'...'retains what already in cart\n    const newCart = [ ...this.state.cart, {product, qty } ];\n    // console.log('quantities' , this.state.cartCount, qty)\n    // Put what is in the cart in state. \n    this.setState({ cart: newCart, cartCount: this.state.cartCount + qty })\n    localStorage.setItem('cart', JSON.stringify(newCart))\n  }\n\n\n  componentDidMount() {\n    // Check if local storage token and user is set\n    const token = localStorage.getItem(\"token\")\n    const user = localStorage.getItem(\"user\")\n    console.log(token)\n    // And if not null, set token into the axios header\n    // which will cause axios headers to be authenticated\n    // set user object into state.\n    if( token !== null && user !== null) {\n      this.setState({ user: JSON.parse(user)} );\n      axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n    }\n    // Load shopping cart from local storage if available\n    // if not null, assume ... (?)\n    const cart = localStorage.getItem( 'cart')\n    if (cart !== null) {\n      // JSON.parse gets the string back and turns into array of objects/\n      this.setState({cart: JSON.parse(cart)})\n    } \n  }\n\n  // passes as arguments token and user that backend sent\n  performLogin = (token, user) => {\n    console.log('app.performLogin', token, user)\n    // setting the axios header with the token sent by the backend\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n    // store the current user into state as an object.\n    this.setState({ user })\n    // save the token into local storage for use by App.js and other components on site.\n    localStorage.setItem( 'token', token)\n    // local storage can only set strings, can't set complex items, so needs to have the JSON stringified.\n    localStorage.setItem( 'user', JSON.stringify(user) )\n  }\n\n    performLogout = ( event )=> {\n      event.preventDefault()\n      delete axios.defaults.headers.common.Authorization\n\n      // Remove the cart & users props stored in local storage.\n      localStorage.removeItem(\"token\")\n      localStorage.removeItem(\"user\")\n      // set the user state as empty object\n      this.setState({ user: {} })\n    } \n\n  render() {\n    return (\n      \n      <Router>\n        <div>\n          <Route path=\"/\" render={(props) => <Header {...props} onLogout={this.performLogout} currentUser={this.state.user} cartCount={this.state.cartCount}/>  } />\n          {/*        \n            Pass in ROUTER PROPS into the \n          */}\n          <Route exact path=\"/login\" render={(props) => <Login {...props} onLogin={this.performLogin} />  } />\n          <main className=\"main\">\n          <div>\n           \n            <br/> \n          </div>\n            <div className=\"content\">\n              <Route exact path=\"/\" component={ProductIndex} />\n              \n              <Route exact path=\"/products/:id\" render={(props) => \n                <ProductDetails \n                {...props} \n                onAddToCart={this.addToCart} \n                cart={this.state.cart}\n                />  \n              } \n              />\n          <Route exact path=\"/cart\" render={(props) => <Cart {...props} cart={this.state.cart} />  }  /> \n            </div>\n          </main>\n          <footer className=\"footer\">\n            Final project at General Assembly - by Robert Paul - rob@glo.id.au\n          </footer>\n        </div>\n      </Router>\n\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}