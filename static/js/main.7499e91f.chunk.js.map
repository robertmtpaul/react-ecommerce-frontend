{"version":3,"sources":["constants.js","components/ProductIndex.js","components/Header.js","components/CheckoutItem.js","components/Checkout.js","components/ProductDetails.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["BASE_URL","module","exports","PRODUCTS_URL","LOGIN_URL","ProductIndex","props","useState","products","setProduct","useEffect","a","axios","get","data","fetchProducts","className","map","product","key","_id","to","src","image","alt","name","brand","price","rating","numReviews","Header","type","undefined","currentUser","href","onClick","e","onLogout","history","push","cartCount","CheckoutItem","itemName","itemQty","itemImage","Checkout","grandTotal","this","cart","forEach","cartItem","qty","toFixed","c","calculateGrandTotal","React","Component","cartQty","ProductDetails","state","category","description","addToCart","console","log","onAddToCart","match","params","id","then","setState","catch","err","productId","cartProduct","checkCart","doSomethingElse","status","onChange","parseInt","target","value","cartClick","Login","email","password","handleChange","event","handleSubmit","preventDefault","post","res","onLogin","token","user","error","onSubmit","App","newCart","localStorage","setItem","JSON","stringify","performLogin","defaults","headers","common","Authorization","performLogout","removeItem","getItem","parse","path","render","exact","component","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7499e91f.chunk.js","sourcesContent":["let BASE_URL;\n\nif(!process.env.NODE_ENV || process.env.NODE_ENV === 'development'){\n  BASE_URL = 'http://localhost:1337' // \n} else {\n  BASE_URL = 'https://node-ecommerce-backend.herokuapp.com' // \n} // if else\nmodule.exports = {\n  PRODUCTS_URL: BASE_URL + '/products',\n  LOGIN_URL: BASE_URL + '/login'\n}","// initialise React and hooks methods i.e. useState, useEffect\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom'\nimport axios from 'axios';\nimport {PRODUCTS_URL} from '../constants'\n\nfunction ProductIndex (props) {\n    // put the product and setProduct into useState\n    const [ products, setProduct ] = useState ([]);\n    \n    useEffect(() => {\n      const fetchProducts = async () => {\n        const { data } = await axios.get(PRODUCTS_URL)\n        // Set the data retrieved vai axios request into state in setProduct\n        setProduct(data);\n      }\n      fetchProducts(); \n      return () => {\n        // cleanup\n      }\n    }, [])\n\n    return <ul className=\"products\">\n    {\n      // Map through products in state, \n      products.map(product =>\n        //set key to something unique like productID to satisfy map function\n        <li key = { product._id }>\n          <div className=\"product\">\n            <Link to={`${/products/}${product._id}`}>\n              <img className=\"product-image\" src={product.image} alt={product.name} />\n            </Link>\n            <div className=\"product-name\">\n              <Link to={`${/products/}${product._id}`}>{product.name}</Link>\n            </div>\n            <div className=\"product-brand\">{product.brand}</div>\n            <div className=\"product-price\">${product.price}</div>\n            <div className=\"product-rating\">{product.rating} Stars({product.numReviews} Reviews)</div>\n          </div>\n        </li>)\n    }\n  </ul>\n    \n}\n\nexport default ProductIndex;","import React from \"react\";\nimport { Route, Link, HashRouter as Router } from 'react-router-dom';\nimport \"../Header.css\"\nimport SearchIcon from \"@material-ui/icons/Search\"\nimport ShoppingBasketIcon from \"@material-ui/icons/ShoppingBasket\"\nfunction Header(props) {\n\n    return (\n\n        <nav className=\"header\">\n            {/* search box */}\n            {/* 3 links */}\n            <Link to=\"/\" >\n                <img className=\"header_logo\" src=\"https://leanfrontiers.com/wp-content/uploads/2018/12/logo-placeholder-png.png\" />\n            </Link>\n            <div className=\"header_search\">\n                <input type=\"text\" />\n                <SearchIcon className=\"header_searchIcon\" />\n            </div>\n            <div className=\"header_nav\">\n                {/* use ternary to show links depending on whether user logged in*/}\n                { \n                 props.currentUser.name !== undefined  \n                 ? \n                 ( \n                  <span>\n                    <span>Hello {props.currentUser.name } </span>\n                    {/* perform logout function on click and redirect to login page */}\n                    <a href=\"#\" onClick={(e) => {props.onLogout(e); props.history.push('/login')} }>Logout </a>\n                  </span>    \n                 ) \n                 : \n                 (\n                    <Link to=\"/login\">\n                        <span>Sign in</span>\n                    </Link>\n                 )\n                }                       \n                <Link to=\"/checkout\">\n                    <div className=\"header_optionBasket\"></div>\n                        {/* Shopping basket icon */}\n                        <ShoppingBasketIcon />\n                        {/* Number items in the basket */}\n                        <span className=\"header_basketCount\">{props.cartCount}</span>\n                </Link>\n            </div>\n            {/* TODO: basket icon with number badge */}\n        </nav>\n\n    )\n}\n\nexport default Header;","import React from 'react'\n\nfunction CheckoutItem(props) {\n    return (\n        <div>\n            {props.itemName}, x{props.itemQty}\n            <br />\n            <img src={props.itemImage} />\n        </div>\n    )\n}\n\nexport default CheckoutItem\n","import React from \"react\"\nimport CheckoutItem from './CheckoutItem'\n\nclass Checkout extends React.Component {\n\n    // TODO: cartUpdate function?\n    // TODO : add clear cart button\n    // TODO : add remove item from cart\n\n    // /cart separate \n    // /cart react route: \n\n    calculateGrandTotal() {\n        let grandTotal = 0\n        this.props.cart.forEach(cartItem => {\n            grandTotal += cartItem.product.price * cartItem.qty\n        });\n        return grandTotal.toFixed(2)\n        // grand total this.grandTotal\n    }\n\n    render() {\n        return (\n            <div>\n                <h5>Here's a detailed breakdown of your cart:</h5>\n                <div>\n                    {\n                        this.props.cart.map(c =>\n                            <CheckoutItem\n                                itemName={c.product.name}\n                                itemQty={c.qty}\n                                itemImage={c.product.image}\n                            />\n                        )\n                    }\n                    Grandtotal: ${this.calculateGrandTotal()}\n                </div>\n            </div>\n        )\n    }\n\n\n}\n\nexport default Checkout","import React from \"react\";\nimport { Route, Link, HashRouter as Router } from \"react-router-dom\";\nimport \"../ProductDetails.css\";\nimport axios from \"axios\";\nimport {PRODUCTS_URL} from '../constants'\n\nlet cartQty = 0;\n\nclass ProductDetails extends React.Component {\n    state = {\n        data: {\n            name: \"\",\n            category: \"\",\n            image: \"\",\n            price: \"\",\n            brand: \"\",\n            rating: \"\",\n            numReviews: \"\",\n            description: \"\"\n        },\n        qty: 1\n    }; // state\n\n    componentDidMount() {\n        axios\n            .get(`${PRODUCTS_URL}/${this.props.match.params.id}`)\n            .then(data => {\n                console.log(data);\n                this.setState({ data: data.data });\n            })\n            .catch(err => console.log(err));\n    } // componentDidMount\n\n    addToCart = () => {\n        console.log('button clicked : contents')\n        // On button click, adds the item from the product details page and passes the ID passed from the parent component App.js\n        this.props.onAddToCart(this.state.data, this.state.qty)\n    }\n\n    checkCart() {\n        console.log('check cart!!');\n        const productId = this.props.match.params.id\n        this.props.cart.forEach(cartProduct => {\n            // check productId's value of each obj against current id in state\n            console.log(\"product being compared:\", cartProduct);\n            if (cartProduct.productId === productId) {\n                cartQty += cartProduct.qty;\n            }\n        });\n    }\n\n    doSomethingElse() {\n        console.log('do something else!!');\n    }\n\n    cartClick() {\n        this.addToCart();\n        this.checkCart();\n        this.doSomethingElse();\n    }\n\n    render() {\n        // TODO: save\n\n\n        return (\n            <div className=\"details\">\n                <div className=\"back\">\n                    <Link to=\"/\">Back</Link>\n                </div>\n                <div className=\"details\">\n                    <div className=\"details-image\">\n                        <img src={this.state.data.image} alt={this.state.data.name} />\n                    </div>\n                    <div className=\"details-info\">\n                        <ul>\n                            <li>\n                                <h4>{this.state.data.name}</h4>\n                            </li>\n                            <li>\n                                {this.state.data.rating} Stars ({this.state.data.numReviews}{\" \"}\n                Reviews )\n              </li>\n                            <li>\n                                <strong>Price: ${this.state.data.price} </strong>\n                            </li>\n                            <li>\n                                <p>Description:</p>\n                                {this.state.data.description}\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n                <div className=\"details-action\">\n                    {cartQty > 0 && <div>You have this amount in cart....{cartQty}</div>}\n                    <ul>\n                        <li>\n                            Price: <strong>${this.state.data.price}</strong>\n                        </li>\n                        <li>Status: {this.state.data.status}</li>\n                        <li>\n                            {/* when button clicked, uses event to save quantity into state */}\n              Qty:{\" \"}\n                            <select\n                                onChange={e => this.setState({ qty: parseInt(e.target.value) })}\n                            >\n                                <option>1</option>\n                                <option>2</option>\n                                <option>3</option>\n                                <option>4</option>\n                                <option>5</option>\n                            </select>\n                        </li>\n                        <li>\n                            {/* gives name of the function to run later on time of click */}\n                            <button className=\"button\" onClick={() => this.cartClick()}>\n                                Add to cart\n              </button>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n} // ProductDetails class\n\nexport default ProductDetails;\n","import React, { useState } from 'react'\nimport '../Login.css';\nimport { Link, HashRouter as Router } from 'react-router-dom';\nimport axios from 'axios';\nimport {LOGIN_URL} from '../constants'\n\nclass Login extends React.Component {\n    // login state \n\n    state = {\n        email: '',\n        password: '',\n    };\n\n    // Store the information entered into the fields in the form as soon as there is a change by listening for event / moment something entered in the form\n    handleChange = (event) => {\n        console.log(event.target.value)\n        console.log(event.target.name)\n        this.setState({\n            // it differentiates between the email/password inputs using the ‘name’ value in the form input element, then assigns it a value to be stored in state\n            [event.target.name]:event.target.value\n        })\n    }\n    \n    handleSubmit = (event) => {\n        event.preventDefault();\n        console.log( )\n        // HandleSubmit posts the login details entered in the form to the backend using axios post request.\n        axios.post(  LOGIN_URL, { \n            email: this.state.email,\n            password: this.state.password\n        })\n        .then(res => {\n            console.log('response data', res.data)\n        // Sets token and user app props to the token and user object received from backend.\n            this.props.onLogin(res.data.token, res.data.user)\n        // Redirects user to productIndex page.\n            this.props.history.push('/')\n        })\n        .catch(error => {\n            // tODO: what if user provided incorrect dtes/-=-.> need to show error message: put \n            console.log('Authentication error: incorrect username or password. ', error)\n        })\n        \n    }\n\n    render(){\n        return (\n            <div className=\"login\">\n            <Link to='/'>\n                <img\n                    className=\"login_logo\"\n                    src=\"https://static.dribbble.com/users/261302/screenshots/1361907/logoplaceholder.png\"\n                />\n            </Link>\n            <div className='login_container'>\n                <h1>Sign-in</h1>\n\n                <form onSubmit={this.handleSubmit}>\n                    <h5>E-mail</h5>\n                    <input \n                        type=\"text\" \n                        name=\"email\"\n                        onChange={this.handleChange} \n                    />\n\n                    <h5>Password</h5>\n                    <input \n                        type=\"password\" \n                        name=\"password\"\n                        onChange={this.handleChange} \n                    />\n\n                    <button className=\"login_signInButton\">Sign in</button>\n                </form>\n\n            </div>\n        </div>\n        ); // return\n    } // render\n\n} // Class login\n\n\nexport default Login\n","import React from 'react';\nimport './App.css';\nimport './Footer.css';\nimport { Route, Link, HashRouter as Router } from 'react-router-dom';\n\n// import website components\nimport ProductIndex from './components/ProductIndex'\nimport Header from './components/Header'\nimport Checkout from './components/Checkout'\nimport ProductDetails from './components/ProductDetails'\nimport Login from './components/Login'\nimport axios from 'axios'\n\nclass App extends React.Component {\n  state = {\n    user: {},\n    cart: [],\n    cartCount: 0,\n  }\n  \n  addToCart = (product, qty) => {\n    console.log('in add to cart: ', product, qty )\n    // put what is in the cart in state\n    // '...'retains what already in cart\n    //set a variable that keeps an updated version of the cart i.e. \n    const newCart = [ ...this.state.cart, {product, qty } ];\n    console.log('quantities' , this.state.cartCount, qty)\n    // \n    this.setState({ cart: newCart, cartCount: this.state.cartCount + qty })\n    localStorage.setItem('cart', JSON.stringify(newCart))\n  }\n\n\n  componentDidMount() {\n    // Check if local storage token and user is set\n    const token = localStorage.getItem(\"token\")\n    const user = localStorage.getItem(\"user\")\n    console.log(token)\n    //  and if not null, set token into the axios header\n    // whcih will cause axios headers to be authenticated\n    // set user object into state.\n    if( token !== null && user !== null) {\n      this.setState({ user: JSON.parse(user)} );\n      axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n    }\n    // Load shopping cart from local storage if available\n    // if not null, assume ... (?)\n    const cart = localStorage.getItem( 'cart')\n    if (cart !== null) {\n      // JSON.parse gets the string back and turns into array of objects/\n      this.setState({cart: JSON.parse(cart)})\n    } \n  }\n\n  // passes as arguments token and user that backend sent\n  performLogin = (token, user) => {\n    console.log('app.performLogin', token, user)\n    // setting the axios header with the token sent by the backend\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n    // store the current user into state as an object.\n    this.setState({ user })\n    // save the token into local storage for use by App.js and other components on site.\n    localStorage.setItem( 'token', token)\n    // local storage can only set strings, can't set complex items, so needs to have the JSON stringified.\n    localStorage.setItem( 'user', JSON.stringify(user) )\n  }\n\n  // cart calculator\n  // always give total number of items \n  // loop to add all cart quantities.\n\n    performLogout = ( event )=> {\n      event.preventDefault()\n      delete axios.defaults.headers.common.Authorization\n      localStorage.removeItem(\"token\")\n      localStorage.removeItem(\"user\")\n      // set the user state as empty object\n      this.setState({ user: {} })\n    } \n    //localStorage.removeItem(\"jwt\")\n    // this.setState = {}\n\n  render() {\n    return (\n      \n      <Router>\n        <div className=\"grid-container\">\n          <Route path=\"/\" render={(props) => <Header {...props} onLogout={this.performLogout} currentUser={this.state.user} cartCount={this.state.cartCount}/>  } />\n          <Route exact path=\"/login\" render={(props) => <Login {...props} onLogin={this.performLogin} />  } />\n          <main className=\"main\">\n          <div>\n           \n            <br/> \n          </div>\n            <div className=\"content\">\n              <Route exact path=\"/\" component={ProductIndex} />\n              \n              <Route exact path=\"/products/:id\" render={(props) => \n                <ProductDetails \n                {...props} \n                onAddToCart={this.addToCart} \n                cart={this.state.cart}\n                />  \n              } \n              />\n          <Route exact path=\"/checkout\" render={(props) => <Checkout {...props} cart={this.state.cart} />  }  /> \n            </div>\n          </main>\n          <footer className=\"footer\">\n            Final project at General Assembly - by Robert Paul - rob@glo.id.au\n          </footer>\n        </div>\n      </Router>\n\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}